
/\*           { ast->loc.column += 2; comment(ast); }
//           { /* fixme : it should be //.*  Neglect */ }

auto         { _TOKEN_(AUTO); }
break        { _TOKEN_(BREAK); }
case         { _TOKEN_(CASE); }
char         { _TOKEN_(CHAR); }
const        { _TOKEN_(CONST); }
continue     { _TOKEN_(CONTINUE); }
default      { _TOKEN_(DEFAULT); }
do           { _TOKEN_(DO); }
double       { _TOKEN_(DOUBLE); }
else         { _TOKEN_(ELSE); }
enum         { _TOKEN_(ENUM); }
extern       { _TOKEN_(EXTERN); }
float        { _TOKEN_(FLOAT); }
for          { _TOKEN_(FOR); }
goto         { _TOKEN_(GOTO); }
if           { _TOKEN_(IF); }
inline       { _TOKEN_(INLINE); }
int          { _TOKEN_(INT); }
long         { _TOKEN_(LONG); }
register     { _TOKEN_(REGISTER); }
restrict     { _TOKEN_(RESTRICT); }
return       { _TOKEN_(RETURN); }
short        { _TOKEN_(SHORT); }
signed       { _TOKEN_(SIGNED); }
sizeof       { _TOKEN_(SIZEOF); }
static       { _TOKEN_(STATIC); }
struct       { _TOKEN_(STRUCT); }
switch       { _TOKEN_(SWITCH); }
typedef      { _TOKEN_(TYPEDEF); }
union        { _TOKEN_(UNION); }
unsigned     { _TOKEN_(UNSIGNED); }
void         { _TOKEN_(VOID); }
volatile     { _TOKEN_(VOLATILE); }
while        { _TOKEN_(WHILE); }
_Alignas                            { _TOKEN_(ALIGNAS); }
_Alignof                            { _TOKEN_(ALIGNOF); }
_Atomic                             { _TOKEN_(ATOMIC); }
_Bool                               { _TOKEN_(BOOL); }
_Complex                            { _TOKEN_(COMPLEX); }
_Generic                            { _TOKEN_(GENERIC); }
_Imaginary                          { _TOKEN_(IMAGINARY); }
_Noreturn                           { _TOKEN_(NORETURN); }
_Static_assert                      { _TOKEN_(STATIC_ASSERT); }
_Thread_local                       { _TOKEN_(THREAD_LOCAL); }
__func__                            { _TOKEN_(FUNC_NAME); }


[a-zA-Z_][a-zA-Z_0-9]*                             { _TOKEN_IDENTIFIER_(); }
(0[xX])[a-fA-F0-9]+(((u|U)(l|L|ll|LL)?)|((l|L|ll|LL)(u|U)?))?   { _TOKEN_(I_CONSTANT); }
[1-9][0-9]*(((u|U)(l|L|ll|LL)?)|((l|L|ll|LL)(u|U)?))?         { _TOKEN_(I_CONSTANT); }

\.\.\.        { _TOKEN_(ELLIPSIS); }
>>=        { _TOKEN_(RIGHT_ASSIGN); }
<<=        { _TOKEN_(LEFT_ASSIGN); }
\+=         { _TOKEN_(ADD_ASSIGN); }
-=         { _TOKEN_(SUB_ASSIGN); }
\*=         { _TOKEN_(MUL_ASSIGN); }
/=         { _TOKEN_(DIV_ASSIGN); }
%=         { _TOKEN_(MOD_ASSIGN); }
&=         { _TOKEN_(AND_ASSIGN); }
\^=         { _TOKEN_(XOR_ASSIGN); }
\|=         { _TOKEN_(OR_ASSIGN); }
>>         { _TOKEN_(RIGHT_OP); }
<<         { _TOKEN_(LEFT_OP); }
\+\+         { _TOKEN_(INC_OP); }
--         { _TOKEN_(DEC_OP); }
->         { _TOKEN_(PTR_OP); }
&&         { _TOKEN_(AND_OP); }
\|\|         { _TOKEN_(OR_OP); }
<=         { _TOKEN_(LE_OP); }
>=         { _TOKEN_(GE_OP); }
==         { _TOKEN_(EQ_OP); }
!=         { _TOKEN_(NE_OP); }


;          { _TOKEN_(SEMICOLON); }
(\{|<%)     { _TOKEN_(LBRACE); }
(\}|%>)     { _TOKEN_(RBRACE); }
,          { _TOKEN_(COMMA); }
:          { _TOKEN_(COLON); }
=          { _TOKEN_(EQUAL); }
\(          { _TOKEN_(LPARENTHESIS); }
\)          { _TOKEN_(RPARENTHESIS); }
(\[|<:)     { _TOKEN_(LBRACKET); }
(\]|:>)     { _TOKEN_(RBRACKET); }
\.          { _TOKEN_(DOT); }
&          { _TOKEN_(AMPERSAND); }
!          { _TOKEN_(NOT); }
~          { _TOKEN_(TILDE); }
-          { _TOKEN_(MINUS); }
\+          { _TOKEN_(PLUS); }
\*          { _TOKEN_(STAR); }
/          { _TOKEN_(SLASH); }
%          { _TOKEN_(PERCENT); }
<          { _TOKEN_(L_T); }
>          { _TOKEN_(G_T); }
\^          { _TOKEN_(CARET); }
\|          { _TOKEN_(PIPE); }
\?          { _TOKEN_(QUESTION); }
